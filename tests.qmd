---
format:
  html:
    toc: true
    toc-depth: 4
    page-layout: full
    css: wider.css
---    


```{r}
#| label: libraries

source(here::here("setup.R"))

plan <- "frs"

xddir <- fs::path(HH, "plans", plan)
extracted_data <- paste0(plan, "_extracted_data.xlsm")
xdpath <- fs::path(xddir, extracted_data)
sheets <- readxl::excel_sheets(xdpath)

```

## Tests

### Benefit-multiplier determination

```{r}
#| label: tests
#| echo: true

# Source your functions
source(here::here("plans", plan, "benefit-functions.R"))
# source(here::here("plans", plan, "lookup-functions.R"))

# load lookup table
# D9:P98
benefit_rules <- read_excel(xdpath, sheet = "benefit_rules", range = "D9:P98")

# Load test data
test_cases <- read_excel(xdpath, sheet = "benefit_rules_test", range = "D6:L56")

# Run specific test file
# testthat::test_file("tests/testthat/test-benefit-multiplier.R")

# Or run all tests in directory
# testthat::test_dir("tests/testthat")

```






## Claude

```{r}
#| label: get-data-claude

fpath <- here::here("frs", "frs_benmult_lookup_claude.csv")
benmult_lookup <- vroom(fpath)

fpath <- here::here("frs", "frs_benmult_test_cases_claude3.csv")
test_data <- vroom(fpath)

```


```{r}
#| label: custom-function-claude

calculate_benefit_multiplier_custom_vectorized <- function(
  class,
  tier,
  early_retirement,
  dist_age,
  yos,
  dist_year
) {
  # Input validation - return 0 for any NA values
  has_na <- is.na(class) |
    is.na(tier) |
    is.na(early_retirement) |
    is.na(dist_age) |
    is.na(yos) |
    is.na(dist_year)

  # Early retirement cases - simplified to base rate for now
  early_result <- case_when(
    class == "regular" ~ 0.0160,
    class == "special_risk" ~ 0.0300,
    class == "judges" ~ 0.0333,
    class %in% c("eso", "eco") ~ 0.0300,
    class == "senior_management" ~ 0.0200,
    TRUE ~ 0
  )

  # Normal retirement cases
  normal_result <- case_when(
    # Regular Tier 1
    class == "regular" &
      tier == "tier_1" &
      ((dist_age >= 65 & yos >= 6) | yos >= 33) ~
      0.0168,
    class == "regular" &
      tier == "tier_1" &
      ((dist_age >= 64 & dist_age < 65 & yos >= 6) | yos >= 32) ~
      0.0165,
    class == "regular" &
      tier == "tier_1" &
      ((dist_age >= 63 & dist_age < 64 & yos >= 6) | yos >= 31) ~
      0.0163,
    class == "regular" &
      tier == "tier_1" &
      ((dist_age >= 62 & dist_age < 63 & yos >= 6) | yos >= 30) ~
      0.0160,

    # Regular Tier 2
    class == "regular" &
      tier == "tier_2" &
      ((dist_age >= 65 & yos >= 8) | yos >= 33) ~
      0.0160,

    # Special Risk Tier 1
    class == "special_risk" &
      tier == "tier_1" &
      ((dist_age >= 55 & yos >= 6) | yos >= 25) ~
      0.0300,

    # Special Risk Tier 2
    class == "special_risk" &
      tier == "tier_2" &
      ((dist_age >= 60 & yos >= 8) | yos >= 30) ~
      0.0300,

    # Judges (both tiers)
    class == "judges" &
      tier == "tier_1" &
      ((dist_age >= 62 & yos >= 6) | yos >= 30) ~
      0.0333,
    class == "judges" &
      tier == "tier_2" &
      ((dist_age >= 65 & yos >= 8) | yos >= 33) ~
      0.0333,

    # Elected Officers (ESO/ECO)
    class %in%
      c("eso", "eco") &
      tier == "tier_1" &
      ((dist_age >= 62 & yos >= 6) | yos >= 30) ~
      0.0300,
    class %in%
      c("eso", "eco") &
      tier == "tier_2" &
      ((dist_age >= 65 & yos >= 8) | yos >= 33) ~
      0.0300,

    # Senior Management
    class == "senior_management" &
      tier == "tier_1" &
      ((dist_age >= 62 & yos >= 6) | yos >= 30) ~
      0.0200,
    class == "senior_management" &
      tier == "tier_2" &
      ((dist_age >= 65 & yos >= 8) | yos >= 33) ~
      0.0200,

    # Default for invalid cases
    TRUE ~ 0
  )

  # Use ifelse to choose between early and normal retirement results
  result <- ifelse(early_retirement, early_result, normal_result)

  # Set result to 0 for any rows with NA values
  result <- ifelse(has_na, 0, result)

  return(result)
}


```

```{r}
calculate_benefit_multiplier_custom_vectorized <- function(
  class,
  tier,
  early_retirement,
  dist_age,
  yos,
  dist_year
) {
  # Input validation - return 0 for any NA values
  has_na <- is.na(class) |
    is.na(tier) |
    is.na(early_retirement) |
    is.na(dist_age) |
    is.na(yos) |
    is.na(dist_year)

  # Early retirement cases - simplified to base rate for now
  early_result <- case_when(
    class == "regular" ~ 0.0160,
    class == "special_risk" ~ 0.0300,
    class == "judges" ~ 0.0333,
    class %in% c("eso", "eco") ~ 0.0300,
    class == "senior_management" ~ 0.0200,
    class == "admin" ~ 0.0300, # Admin gets Special Risk rate for early retirement
    TRUE ~ 0
  )

  # Normal retirement cases
  normal_result <- case_when(
    # Regular Tier 1
    class == "regular" &
      tier == "tier_1" &
      ((dist_age >= 65 & yos >= 6) | yos >= 33) ~
      0.0168,
    class == "regular" &
      tier == "tier_1" &
      ((dist_age >= 64 & dist_age < 65 & yos >= 6) | yos >= 32) ~
      0.0165,
    class == "regular" &
      tier == "tier_1" &
      ((dist_age >= 63 & dist_age < 64 & yos >= 6) | yos >= 31) ~
      0.0163,
    class == "regular" &
      tier == "tier_1" &
      ((dist_age >= 62 & dist_age < 63 & yos >= 6) | yos >= 30) ~
      0.0160,

    # Regular Tier 2
    class == "regular" &
      tier == "tier_2" &
      ((dist_age >= 65 & yos >= 8) | yos >= 33) ~
      0.0160,

    # Special Risk Tier 1
    class == "special_risk" &
      tier == "tier_1" &
      ((dist_age >= 55 & yos >= 6) | yos >= 25) ~
      0.0300,

    # Special Risk Tier 2
    class == "special_risk" &
      tier == "tier_2" &
      ((dist_age >= 60 & yos >= 8) | yos >= 30) ~
      0.0300,

    # Admin class - gets maximum of Special Risk or Regular Class benefits
    class == "admin" &
      tier == "tier_1" &
      ((dist_age >= 55 & yos >= 6) |
        yos >= 25 | # Special Risk path
        (dist_age >= 65 & yos >= 6) |
        yos >= 33) ~ # Regular path
      0.0300, # Special Risk rate dominates for Tier 1

    class == "admin" &
      tier == "tier_1" &
      ((dist_age >= 64 & dist_age < 65 & yos >= 6) | yos >= 32) ~
      0.0165, # Regular Class rate when Special Risk doesn't apply

    class == "admin" &
      tier == "tier_1" &
      ((dist_age >= 63 & dist_age < 64 & yos >= 6) | yos >= 31) ~
      0.0163, # Regular Class rate when Special Risk doesn't apply

    class == "admin" &
      tier == "tier_1" &
      ((dist_age >= 62 & dist_age < 63 & yos >= 6) | yos >= 30) ~
      0.0160, # Regular Class rate when Special Risk doesn't apply

    class == "admin" &
      tier == "tier_2" &
      ((dist_age >= 60 & yos >= 8) |
        yos >= 30 | # Special Risk path
        (dist_age >= 65 & yos >= 8) |
        yos >= 33) ~ # Regular path
      0.0300, # Special Risk rate dominates for Tier 2

    # Judges (both tiers)
    class == "judges" &
      tier == "tier_1" &
      ((dist_age >= 62 & yos >= 6) | yos >= 30) ~
      0.0333,
    class == "judges" &
      tier == "tier_2" &
      ((dist_age >= 65 & yos >= 8) | yos >= 33) ~
      0.0333,

    # Elected Officers (ESO/ECO)
    class %in%
      c("eso", "eco") &
      tier == "tier_1" &
      ((dist_age >= 62 & yos >= 6) | yos >= 30) ~
      0.0300,
    class %in%
      c("eso", "eco") &
      tier == "tier_2" &
      ((dist_age >= 65 & yos >= 8) | yos >= 33) ~
      0.0300,

    # Senior Management
    class == "senior_management" &
      tier == "tier_1" &
      ((dist_age >= 62 & yos >= 6) | yos >= 30) ~
      0.0200,
    class == "senior_management" &
      tier == "tier_2" &
      ((dist_age >= 65 & yos >= 8) | yos >= 33) ~
      0.0200,

    # Default for invalid cases
    TRUE ~ 0
  )

  # Use ifelse to choose between early and normal retirement results
  result <- ifelse(early_retirement, early_result, normal_result)

  # Set result to 0 for any rows with NA values
  result <- ifelse(has_na, 0, result)

  return(result)
}


```



```{r}
#| label: lookup-function-claude

calculate_benefit_multiplier_lookup <- function(member_data, lookup_table) {
  result <- member_data |>
    left_join(
      lookup_table,
      join_by(
        class == class,
        tier == tier,
        early_retirement == early_retirement,
        dist_age >= dist_age_min_ge,
        dist_age < dist_age_max_lt,
        yos >= yos_min_ge,
        yos < yos_max_lt,
        dist_year >= dist_year_min_ge,
        dist_year < dist_year_max_lt
      )
    ) |>
    group_by(member_id) |>
    summarise(
      calculated_benmult = ifelse(
        all(is.na(benmult)),
        0,
        max(benmult, na.rm = TRUE)
      ),
      .groups = "drop"
    )

  return(result)
}


```


```{r}

calculate_benefit_multiplier_lookup2 <- function(
  class,
  tier,
  early_retirement,
  dist_age,
  yos,
  dist_year,
  lookup_table
) {
  result <- tibble(class, tier, early_retirement, dist_age, yos, dist_year) |>
    left_join(
      lookup_table,
      join_by(
        class == class,
        tier == tier,
        early_retirement == early_retirement,
        dist_age >= dist_age_min_ge,
        dist_age < dist_age_max_lt,
        yos >= yos_min_ge,
        yos < yos_max_lt,
        dist_year >= dist_year_min_ge,
        dist_year < dist_year_max_lt
      )
    ) |>
    summarise(
      benmult_calc = max(benmult, na.rm = TRUE),
      .by = c(class, tier, early_retirement, dist_age, yos, dist_year)
    )

  return(result$benmult_calc)
}

```



```{r}

test_results_vectorized <- test_data |>
  mutate(
    calculated_benmult = calculate_benefit_multiplier_custom_vectorized(
      class,
      tier,
      early_retirement,
      dist_age,
      yos,
      dist_year
    ),
    match = abs(calculated_benmult - expected_benmult) < 0.0001
  )

test_results_vectorized |>
  select(member_id, expected_benmult, calculated_benmult, match) |>
  filter(!match)


```


```{r}

# test_results_lookup <- calculate_benefit_multiplier_lookup(test_data, lookup_table=benmult_lookup) |>
#   left_join(test_data |> select(member_id, expected_benmult), by = "member_id") |>
#   mutate(match = abs(calculated_benmult - expected_benmult) < 0.0001)

# Test the lookup function
# test_results_lookup2 <- test_data |>
#   mutate(benmult_calc = calculate_benefit_multiplier_lookup2(class,
#   tier,
#   early_retirement,
#   dist_age,
#   yos,
#   dist_year, benmult_lookup)) |>
#   left_join(test_data |> select(member_id, expected_benmult), by = "member_id") |>
#   mutate(match = abs(calculated_benmult - expected_benmult) < 0.0001)
#
# test_results_lookup

check <- test_data |>
  mutate(id = row_number()) |>
  left_join(
    benmult_lookup,
    join_by(
      class == class,
      tier == tier,
      early_retirement == early_retirement,
      dist_age >= dist_age_min_ge,
      dist_age < dist_age_max_lt,
      yos >= yos_min_ge,
      yos < yos_max_lt,
      dist_year >= dist_year_min_ge,
      dist_year < dist_year_max_lt
    )
  ) |>
  select(
    -c(
      dist_age_min_ge,
      dist_age_max_lt,
      yos_min_ge,
      yos_max_lt,
      dist_year_min_ge,
      dist_year_max_lt
    )
  ) |>
  mutate(benmult = replace_na(benmult, 0)) |>
  slice_max(benmult, with_ties = FALSE, by = id)

check |>
  mutate(match = abs(benmult - expected_benmult) < 0.0001) |>
  filter(!match) |>
  select(
    id,
    member_id,
    test_description,
    class,
    tier,
    early_retirement,
    dist_age,
    yos,
    dist_year,
    expected_benmult,
    benmult,
    rule_description
  )


```


## chat


```{r}
#| label: get_benmult_frs

get_benmult_frs <- function(
  class,
  tier,
  early_retirement,
  dist_age,
  yos,
  dist_year
) {
  class <- tolower(class)
  tier <- tolower(tier)
  early_retirement <- toupper(as.character(early_retirement))

  case_when(
    # Placeholder test cases (special class with dist_year == 0)
    class == "special" & dist_year == 0 ~ NA_real_,

    # ADMIN tier_1 (specific thresholds)
    class == "admin" & tier == "tier_1" & early_retirement == "TRUE" ~ 0.0160,
    class == "admin" & tier == "tier_1" & (yos >= 28 | dist_age >= 58) ~ 0.0168,
    class == "admin" & tier == "tier_1" & (yos >= 27 | dist_age >= 57) ~ 0.0165,
    class == "admin" & tier == "tier_1" & (yos >= 26 | dist_age >= 56) ~ 0.0163,
    class == "admin" & tier == "tier_1" & (yos >= 25 | dist_age >= 55) ~ 0.0160,

    # REGULAR tier_1
    class == "regular" & tier == "tier_1" & early_retirement == "TRUE" ~ 0.0160,
    class == "regular" & tier == "tier_1" & (yos >= 33 | dist_age >= 65) ~
      0.0168,
    class == "regular" & tier == "tier_1" & (yos >= 32 | dist_age >= 64) ~
      0.0165,
    class == "regular" & tier == "tier_1" & (yos >= 31 | dist_age >= 63) ~
      0.0163,
    class == "regular" & tier == "tier_1" & (yos >= 30 | dist_age >= 62) ~
      0.0160,

    # REGULAR tier_2 and tier_3
    class == "regular" &
      tier %in% c("tier_2", "tier_3") &
      early_retirement == "TRUE" ~
      0.0160,
    class == "regular" &
      tier %in% c("tier_2", "tier_3") &
      (yos >= 36 | dist_age >= 68) ~
      0.0168,
    class == "regular" &
      tier %in% c("tier_2", "tier_3") &
      (yos >= 35 | dist_age >= 67) ~
      0.0165,
    class == "regular" &
      tier %in% c("tier_2", "tier_3") &
      (yos >= 34 | dist_age >= 66) ~
      0.0163,
    class == "regular" &
      tier %in% c("tier_2", "tier_3") &
      (yos >= 33 | dist_age >= 65) ~
      0.0160,

    # ADMIN tier_2 and tier_3 — YOS-based thresholds only
    class == "admin" &
      tier %in% c("tier_2", "tier_3") &
      early_retirement == "TRUE" ~
      0.0160,
    class == "admin" & tier %in% c("tier_2", "tier_3") & yos >= 33 ~ 0.0168,
    class == "admin" & tier %in% c("tier_2", "tier_3") & yos >= 32 ~ 0.0165,
    class == "admin" & tier %in% c("tier_2", "tier_3") & yos >= 31 ~ 0.0163,
    class == "admin" & tier %in% c("tier_2", "tier_3") & yos >= 30 ~ 0.0160,

    # SPECIAL class
    class == "special" & dist_year < 1975 & dist_year > 0 ~ 0.0200,
    class == "special" ~ 0.0300,

    # ECO and ESO
    class %in% c("eco", "eso") ~ 0.0300,

    # Judges
    class == "judges" ~ 0.0333,

    # Senior Management
    class == "senior_management" ~ 0.0200,

    # Default fallback
    .default = NA_real_
  )
}


```


```{r}

```


```{r}
#| label: get_benmult_lookup

# get_benmult_lookup <- function(
#   class,
#   tier,
#   early_retirement,
#   dist_age,
#   yos,
#   dist_year
# ) {
#   # Ensure fuzzyjoin is loaded
#   require(dplyr)
#   require(fuzzyjoin)

#   input_tbl <- tibble(
#     id = seq_along(class),
#     class = tolower(class),
#     tier = tolower(tier),
#     early_retirement = toupper(as.character(early_retirement)),
#     dist_age = dist_age,
#     yos = yos,
#     dist_year = dist_year
#   )

#   joined <- fuzzy_left_join(
#     input_tbl,
#     frs_lookup,
#     by = c(
#       "class" = "class",
#       "tier" = "tier",
#       "early_retirement" = "early_retirement",
#       "yos" = "yos_min_ge",
#       "yos" = "yos_max_lt",
#       "dist_age" = "dist_age_min_ge",
#       "dist_age" = "dist_age_max_lt",
#       "dist_year" = "dist_year_min_ge",
#       "dist_year" = "dist_year_max_lt"
#     ),
#     match_fun = list(`==`, `==`, `==`, `>=`, `<`, `>=`, `<`, `>=`, `<`)
#   )

#   # Ensure one row per id (prioritize first match if duplicates)
#   joined_dedup <- joined %>%
#     group_by(id) %>%
#     arrange(id) %>%
#     slice_head(n = 1) %>%
#     ungroup()

#   # Create a complete vector with NA fallback
#   out <- rep(NA_real_, nrow(input_tbl))
#   out[joined_dedup$id] <- joined_dedup$benmult

#   return(out)
# }

# Assumes frs_lookup is already loaded and formatted (e.g., from frs_benmult_lookup_v6.csv)

get_benmult_lookup <- function(
  class,
  tier,
  early_retirement,
  dist_age,
  yos,
  dist_year
) {
  # Prepare input tibble
  input_tbl <- tibble(
    id = seq_along(class),
    class = tolower(class),
    tier = tolower(tier),
    early_retirement = as.logical(early_retirement),
    dist_age = dist_age,
    yos = yos,
    dist_year = dist_year
  )

  # Perform non-equi left join using dplyr 1.1+ join_by() syntax
  joined <- left_join(
    input_tbl,
    frs_lookup,
    join_by(
      class == class,
      tier == tier,
      early_retirement == early_retirement,
      yos >= yos_min_ge,
      yos < yos_max_lt,
      dist_age >= dist_age_min_ge,
      dist_age < dist_age_max_lt,
      dist_year >= dist_year_min_ge,
      dist_year < dist_year_max_lt
    ),
    relationship = "many-to-one" # helps detect errors if multiple matches are possible
  )

  # Reorder to match input order and extract benmult
  joined %>%
    arrange(id) %>%
    pull(benmult)
}


```

```{r}

fpath <- here::here("frs", "frs_benmult_test_cases_v5.csv")
test_cases <- read_csv(fpath)

fpath <- here::here("frs", "frs_benmult_lookup_v7_mutually_exclusive_final.csv")
frs_lookup <- read_csv(fpath) |>
  mutate(
    placeholder = ifelse(
      dist_year_min_ge == 0 & dist_year_max_lt == 0,
      TRUE,
      FALSE
    )
  )

```

## Test
```{r}

tc2a <- test_cases |>
  mutate(
    benmult_frs = get_benmult_frs(
      class,
      tier,
      early_retirement,
      dist_age,
      yos,
      dist_year
    )
  )

tc2a |>
  filter(abs(benmult - benmult_frs) > 1e-8)

tc2a |>
  filter(is.na(benmult_frs))

```



```{r}

tc2b <- test_cases |>
  mutate(
    benmult_lookup = get_benmult_lookup(
      class,
      tier,
      early_retirement,
      dist_age,
      yos,
      dist_year
    )
  )

tc2b |>
  filter(abs(benmult - benmult_lookup) > 1e-8)

tc2b |>
  filter(is.na(benmult_lookup))

summary(tc2b)

# row 21
plan_name
class
tier
early_retirement
dist_age
yos
dist_year
benmult
FRS
admin
tier_1
TRUE
54
20
2023
0.016

```