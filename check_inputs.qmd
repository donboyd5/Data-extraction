---
format:
  html:
    toc: true
    toc-depth: 4
    page-layout: full
    css: wider.css
---    

# Check inputs for a plan

## Define plan to check

```{r}
#| label: define-plan

plan <- "abc"
# template <- "data_extraction_template_v0.1.xlsx"
# template <- "data_extraction_template_v0.2.xlsx"
template <- "data_extraction_template_v0.3.xlsm"

```

## Setup

```{r}
#| label: libraries

libs <- function() {
  library(rlang)
  library(tidyverse)
  tprint <- 75 # default tibble print
  options(tibble.print_max = tprint, tibble.print_min = tprint) # show up to tprint rows

  # tools
  library(fs)
  library(stringr)
  library(vroom)
  library(readxl)
  library(openxlsx2) # for writing xlsx files
  library(lubridate)
  library(RColorBrewer)
  library(RcppRoll)
  library(fredr)
  library(tidycensus)

  # boyd libraries
  library(btools)
  library(bdata)
  library(bggtools)
  library(bmaps)

  # graphics
  library(scales)
  library(ggbeeswarm)
  library(patchwork)
  library(gridExtra)
  library(ggrepel)
  library(ggbreak)

  # tables
  library(formattable)
  library(knitr)
  library(kableExtra)
  library(DT)
  library(gt)
  library(gtExtras)
  library(janitor)
  library(skimr)
  library(vtable)

  # maps
  # library(maps)
  # # https://cran.r-project.org/web/packages/usmap/vignettes/mapping.html
  # library(usmap)
}

suppressMessages(libs())

```

```{r}
#| label: locations

OD <- r"(C:\Users\donbo\OneDrive\Documents\Reason_RockCollege_PensionTool\Data_extraction_template)"
template_path <- fs::path(OD, template)
template_ext <- fs::path_ext(template_path)

HH <- here::here()
newfile <- paste0(fs::path_ext_remove(template), "_check.", template_ext)
check_path <- fs::path(HH, newfile)

```

```{r}
#| label: copy-file
#| eval: false

fs::file_copy(path = template_path, new_path = check_path, overwrite = TRUE)

```

## Check file structure

```{r}
#| label: get-sheets

sheets <- readxl::excel_sheets(check_path)

# define sheets to show
# exclude <- c("process", "conventions", "abbreviations", "sheets")
exclude <- c("0_process", "0_conventions", "0_abbreviations", "0_sheets")
sheets_show <- setdiff(sheets, exclude)
sheets_sort <- sheets_show |> sort()

```


```{r}
#| label: sheet-functions

get_item <- function(s, info) {
  value <- info$value[info$item == s]
}

item_exists <- function(s, info) {
  any(info$item == s & !is.na(info$value))
}

get_limits <- function(info) {
  limits <- NULL
  if (
    item_exists("start_col", info) &&
      item_exists("end_col", info) &&
      item_exists("start_row", info)
  ) {
    start_col <- cellranger::letter_to_num(get_item("start_col", info))
    end_col <- cellranger::letter_to_num(get_item("end_col", info))
    start_row <- get_item("start_row", info) |> as.numeric()
    # Create cell_limits object
    limits <- cell_limits(
      ul = c(start_row, start_col),
      lr = c(NA, end_col) # NA means go to bottom of the sheet
    )
  }
  limits
}

get_data <- function(sheet, path = check_path) {
  info <- suppressMessages(read_excel(
    path,
    sheet = sheet,
    range = cell_cols("A:B"),
    col_names = c("item", "value")
  ))
  info <- bind_rows(tibble(item = "sheet", value = sheet), info)

  limits <- get_limits(info)

  data <- NULL
  # only get data if we have a valid limits object
  if (!is.null(limits)) {
    data <- suppressMessages(read_excel(
      check_path,
      sheet = sheet,
      range = limits,
      col_types = "text"
    ))
  }

  return(list(info = info, data = data))
}

show_sheets <- function(sheets_to_show) {
  for (s in sheets_to_show) {
    msg <- paste0("\n## ", s, "\n\n")
    cat(msg)
    res <- get_data(s)

    cat("\n### Sheet info\n\n")
    if (interactive()) {
      print(knitr::kable(res$info)) # Simple table for interactive
    } else {
      print(
        knitr::kable(res$info) %>%
          kableExtra::kable_styling(
            bootstrap_options = "striped",
            full_width = FALSE
          )
      )
    }

    cat("\n### Sheet data\n\n")
    if (interactive() & !is.null(res$data)) {
      print(knitr::kable(res$data)) # Simple table for interactive
    } else if (!is.null(res$data)) {
      print(
        knitr::kable(res$data) %>%
          kableExtra::kable_styling(
            bootstrap_options = "striped",
            full_width = FALSE
          ) |>
          kableExtra::scroll_box(width = "100%", height = "auto")
      )
    }
  }
}

```


## Show sheets
```{r}
#| label: show-sheets
#| results: asis

sheets_to_show <- sheets_sort
show_sheets(sheets_to_show)

```


```{r echo=FALSE}
knitr::knit_exit()
```

